/// this is class is like a dictionary or hashtable where the key is an object instead of a string.
//  note, the lookupKey argument is generally not given.
Ext.define('Ext.ux.data.ObjectMap', {
    constructor: function (lookupKey) {

        var prvt;
        prvt = {
            lookupKey: (Ext.isEmpty(lookupKey) ? '_' + (++Ext.ux.data.ObjectMap.counter) : lookupKey),
            getKey: function (obj, lk) {
                var meta, objectIDs;
                if (!obj || !Ext.isObject(obj)) {
                    return null;
                }
                if (!obj[Ext.ux.data.ObjectMap.getMetaFnName]) {
                    objectIDs = {};
                    meta = {
                        getObjectKey: function (lk2) {
                            if (!objectIDs[lk2]) {
                                objectIDs[lk2] = '_' + (++Ext.ux.data.ObjectMap.keyCounter);
                            }
                            return objectIDs[lk2];
                        }
                    };
                    obj[Ext.ux.data.ObjectMap.getMetaFnName] = function () {
                        return meta;
                    };
                }
                return (obj[Ext.ux.data.ObjectMap.getMetaFnName]()).getObjectKey(lk);
            },
            objectLookup: {},
            add: function (obj, value) {
                if (!obj || !Ext.isObject(obj)) {
                    return;
                }
                prvt.objectLookup[prvt.getKey(obj, prvt.lookupKey)] = value;
            },
            set: function (obj, value) {
                var key;
                if (!obj || !Ext.isObject(obj)) {
                    return;
                }
                key = prvt.getKey(obj, prvt.lookupKey);
                prvt.objectLookup[key] = value;
            },
            removeKey: function (obj) {
                if (!obj || !Ext.isObject(obj)) {
                    return;
                }
                prvt.objectLookup[prvt.getKey(obj, prvt.lookupKey)] = undefined;
            },
            get: function (obj) {
                if (!obj || !Ext.isObject(obj)) {
                    return null;
                }
                return prvt.objectLookup[prvt.getKey(obj, prvt.lookupKey)];
            },
            containsKey: function (obj) {
                if (!obj || !Ext.isObject(obj)) {
                    return false;
                }
                return prvt.objectLookup[prvt.getKey(obj, prvt.lookupKey)] !== undefined;
            },
            clear: function () {
                prvt.objectLookup = {};
            }
        };
        // public stuff
        Ext.apply(this, {
            add: prvt.add,
            removeKey: prvt.removeKey,
            get: prvt.get,
            set: prvt.set,
            containsKey: prvt.containsKey,
            clear: prvt.clear
        });

        return this;
    }
});
Ext.ux.data.ObjectMap.getMetaFnName = 'getMeta';
Ext.ux.data.ObjectMap.counter = 0;
Ext.ux.data.ObjectMap.keyCounter = 0;