Ext.define('Ext.ux.data.CloneMap', {
    constructor: function (original) {
        var prvt;
        prvt = {
            original: original,
            clone: null,
            originalToCloneMap: new Ext.ux.data.ObjectMap(),
            cloneToOriginalMap: new Ext.ux.data.ObjectMap(),

            cloneItem: function (item) {
                if (item === null) {
                    return null;
                } else if (Ext.isArray(item)) {
                    return prvt.cloneArray(item);
                } else if (Ext.isObject(item)) {
                    return prvt.cloneObject(item);
                } else if (Ext.isPrimitive(item) || Ext.isDate(item)) {
                    return item;
                } else {
                    return undefined;
                }
            },
            cloneArray: function (arr) {
                var clone, i;
                if (prvt.originalToCloneMap.containsKey(arr)) {
                    clone = prvt.originalToCloneMap.get(arr);
                } else {
                    clone = [];
                    prvt.originalToCloneMap.add(arr, clone);
                    prvt.cloneToOriginalMap.add(clone, arr);
                    for (i = 0; i < arr.length; i++) {
                        clone.push(prvt.cloneItem(arr[i]));
                    }
                }
                return clone;
            },
            cloneObject: function (obj) {
                var clone, property;
                if (prvt.originalToCloneMap.containsKey(obj)) {
                    clone = prvt.originalToCloneMap.get(obj);
                } else {
                    clone = {};
                    prvt.originalToCloneMap.add(obj, clone);
                    prvt.cloneToOriginalMap.add(clone, obj);
                    for (property in obj) {
                        if (obj.hasOwnProperty(property)) {
                            clone[property] = prvt.cloneItem(obj[property]);
                        }
                    }
                }
                return clone;
            },
            getCloneRoot: function () {
                return prvt.clone;
            },
            getClone: function (obj) {
                if (obj === null) {
                    return null;
                } else {
                    if (prvt.originalToCloneMap.containsKey(obj)) {
                        return prvt.originalToCloneMap.get(obj);
                    } else {
                        return null;
                    }
                }
            },

            appendObjectDiff: function (diffSet, objectLookup, newItem, oldItem, deepCheck) {
                var getNewObj, getOldObj, property, newValue, oldValue;
                if (!newItem) {
                    return;
                }
                if (objectLookup.containsKey(newItem)) {
                    return;
                } else {
                    objectLookup.add(newItem, true);
                }

                getNewObj = function () {
                    return newItem;
                };

                if (!oldItem) {

                    diffSet.newItems.push({
                        name: 'New Object',
                        getNewObj: getNewObj
                    });

                } else {
                    if (Ext.isObject(oldItem)) {
                        getOldObj = function () {
                            return oldItem;
                        };

                        for (property in newItem) {
                            if (newItem.hasOwnProperty(property)) {
                                newValue = newItem[property];
                                oldValue = oldItem[property];

                                /**
                                 * TODO: investigate using Ext.isEmpty() instead of a 'null' check
                                 */

                                if (newValue === null) {
                                    // since it is null, we need to check the old value to determine type
                                    if (oldValue !== null && oldValue !== undefined) {
                                        if (Ext.isArray(oldValue) || Ext.isObject(oldValue)) {
                                            diffSet.modifiedItems.push({
                                                name: 'Removed Property',
                                                property: property,
                                                getOldObj: getOldObj,
                                                getNewObj: getNewObj
                                            });
                                        } else {
                                            oldValue = Ext.isEmpty(oldValue) ? null : oldValue;
                                            if (newValue !== oldValue) {
                                                diffSet.modifiedItems.push({
                                                    name: 'Modified Property',
                                                    property: property,
                                                    oldValue: oldValue,
                                                    newValue: newValue,
                                                    getOldObj: getOldObj,
                                                    getNewObj: getNewObj
                                                });
                                            }
                                        }
                                    }
                                } else if (Ext.isPrimitive(newValue) || Ext.isDate(newValue)) {

                                    newValue = Ext.isEmpty(newValue) ? null : newValue;
                                    oldValue = Ext.isEmpty(oldValue) ? null : oldValue;

                                    if (newValue !== oldValue) {
                                        diffSet.modifiedItems.push({
                                            name: 'Modified Property',
                                            property: property,
                                            oldValue: Ext.isEmpty(oldValue) ? null : oldValue,
                                            /**
                                             * check for empty string and set it to 'null'
                                             * for numbers and dates
                                             */
                                            newValue: Ext.isEmpty(newValue) ? null : newValue,
                                            getOldObj: getOldObj,
                                            getNewObj: getNewObj
                                        });
                                    }
                                } else if (Ext.isArray(newValue)) {
                                    prvt.appendArrayDiff(diffSet, objectLookup, newValue, oldValue, deepCheck);
                                } else if (Ext.isObject(newValue)) {
                                    prvt.appendObjectDiff(diffSet, objectLookup, newValue, oldValue, deepCheck);
                                }
                            }
                        }

                    }
                }
            },
            appendArrayDiff: function (diffSet, objectLookup, newItem, oldItem, deepCheck) {
                var recurse, i, newValue, oldValue;
                if (!newItem) {
                    return;
                }
                if (objectLookup.containsKey(newItem)) {
                    recurse = false;
                    return;
                } else {
                    objectLookup.add(newItem, true);
                    recurse = true;
                }

                if (!oldItem) {
                    diffSet.newItems.push({
                        name: 'New Array'
                    });
                } else {
                    if (Ext.isArray(oldItem)) {


                        if (recurse) {
                            // we're comparing two arrays.  check the length
                            if (newItem.length !== oldItem.length) {
                                diffSet.modifiedItems.push({
                                    name: 'Modified Array',
                                    oldLength: oldItem.length,
                                    newLength: newItem.length
                                });

                                // we need to look through the arrays to see if some are new and if some are old
                                //if (deepCheck) {
                                // todo sean, finish this
                                //}
                            } else {
                                for (i = 0; i < newItem.length; i++) {
                                    newValue = newItem[i];
                                    oldValue = oldItem[i];
                                    if (Ext.isObject(newValue)) {
                                        prvt.appendObjectDiff(diffSet, objectLookup, newValue, oldValue, deepCheck);
                                    }
                                }
                            }
                        }
                    }
                }
            },
            appendItemDiff: function (diffSet, objectLookup, newItem, oldItem, deepCheck) {
                if (Ext.isArray(newItem)) {
                    prvt.appendArrayDiff(diffSet, objectLookup, newItem, oldItem, deepCheck);
                } else if (Ext.isObject(newItem)) {
                    prvt.appendObjectDiff(diffSet, objectLookup, newItem, oldItem, deepCheck);
                }
            },

            diffSetRunning: false,
            diffSetObjLookup: null,
            getDiffSet: function (obj, deepCheck) {
                var diffSet, clone;
                if (prvt.diffSetRunning) {
                    return null;
                } // let's make sure that this is only running on at a time.
                prvt.diffSetRunning = true; // lock it
                // we need a lookup to avoid loops.  let's re-use this lookup.
                if (!prvt.diffSetObjLookup) {
                    prvt.diffSetObjLookup = new Ext.ux.data.ObjectMap();
                }

                diffSet = {
                    newItems: [],
                    modifiedItems: [],
                    deletedItems: []
                };

                clone = prvt.getClone(obj);
                prvt.appendItemDiff(diffSet, prvt.diffSetObjLookup, obj, clone, deepCheck);

                prvt.diffSetObjLookup.clear(); // clear the lookup for re-use
                prvt.diffSetRunning = false; // unlock it
                diffSet.isDifferent = ((diffSet.newItems.length > 0) || (diffSet.modifiedItems.length > 0) || (diffSet.deletedItems.length > 0));

                return diffSet;
            }
        };

        // execute
        prvt.clone = prvt.cloneItem(original);

        // return closure
        return {
            getCloneRoot: prvt.getCloneRoot,
            getClone: prvt.getClone,
            getDiffSet: prvt.getDiffSet
        };

    }
});