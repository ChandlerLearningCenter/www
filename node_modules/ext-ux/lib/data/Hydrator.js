Ext.define('Ext.ux.data.Hydrator', {
    oidProp: 'oid',
    refProp: 'ref',
    getOidFnName: 'getOID',
    mergeProp: 'merge',

    constructor: function (config) {
        Ext.apply(this, {
            objectMap: new Ext.ux.data.ObjectMap(),
            multipleInstanceMetas: [],
            referenceInstanceListLookup: {},
            referencedInstanceLookup: {},
            hasMultiples: false
        });
        return this;
    },


    getItemMeta: function (item) {
        var meta;
        if (this.objectMap.containsKey(item)) {
            return this.objectMap.get(item);
        } else {
            meta = {
                instances: []
            };
            this.objectMap.add(item, meta);
            return meta;
        }
    },
    containsItem: function (item) {
        return this.objectMap.containsKey(item);
    },
    getInstanceCount: function (item) {
        var meta;
        if (item && this.containsItem(item)) {
            meta = this.getItemMeta(item);
            return meta.instances.length;
        } else {
            return 0;
        }
    },
    add: function (item) {
        var orphanedReferenceLists, referenceInstanceList, referencedInstance, orphanedOIDs, i, oid;
        if (!item) {
            return;
        }

        this.addItem(item, 0, null, null);

        // link the references to the referenced instances
        orphanedReferenceLists = [];
        for (oid in this.referenceInstanceListLookup) {
            if (this.referenceInstanceListLookup.hasOwnProperty(oid)) {
                referenceInstanceList = this.referenceInstanceListLookup[oid];
                referencedInstance = this.referencedInstanceLookup[oid];
                if (referencedInstance) {
                    referencedInstance.references = referenceInstanceList;
                } else {
                    orphanedReferenceLists.push({
                        oid: oid,
                        instances: referenceInstanceList
                    });
                }
            }
        }
        if (orphanedReferenceLists.length) {
            orphanedOIDs = orphanedReferenceLists[0].oid;
            for (i = 1; i > orphanedReferenceLists.length; i++) {
                orphanedOIDs += ', ' + orphanedReferenceLists[i].oid;
            }
        }

    },
    addItem: function (item, depth, parentInstance, rel) {
        var isArray, isObject, meta, isNewItem, instance, oid, refList, i, key;
        isArray = Ext.isArray(item);
        isObject = (isArray ? false : Ext.isObject(item));
        if (!isArray && !isObject) {
            return;
        }
        meta = this.getItemMeta(item);
        isNewItem = meta.instances.length === 0;
        instance = {
            meta: meta,
            depth: depth,
            parent: parentInstance,
            rel: rel
        };
        // add the instance
        meta.instances.push(instance);
        if (isNewItem) {
            // add the instance
            meta.isArray = isArray;
            meta.isObject = isObject;
            meta.item = item;

            // check to see if it is a referencedInstance or a reference
            if (isObject) {
                if (item[this.oidProp] || item[this.getOidFnName]) {
                    if (item[this.getOidFnName]) {
                        oid = item[this.getOidFnName]();
                        item[this.oidProp] = oid;
                        item[this.getOidFnName] = undefined;
                    } else {
                        oid = item[this.oidProp];
                    }
                    if (item[this.refProp]) {
                        throw 'Item should not have both an .oid and .ref property: ' + oid;
                    }

                    // attach to meta
                    meta.oid = oid;

                    // it has an oid, so it may be referenced
                    if (this.referencedInstanceLookup[oid]) {
                        return null;
                    } else {
                        this.referencedInstanceLookup[oid] = instance;
                    }
                } else if (item[this.refProp]) {
                    oid = item[this.refProp];
                    refList = this.referenceInstanceListLookup[oid];
                    if (!refList) {
                        refList = [];
                        this.referenceInstanceListLookup[oid] = refList;
                    }
                    refList.push(instance);
                }
            }

            // recurse
            if (isArray) {
                // it is an array
                for (i = 0; i < item.length; i++) {
                    this.addItem(item[i], depth + 1, instance, i);
                }
            } else {
                // it is an object
                for (key in item) {
                    if (item.hasOwnProperty(key)) {
                        this.addItem(item[key], depth + 1, instance, key);
                    }
                }
            }
        } else {
            // keep track of which items have multiple instances.  add the meta object rather than the item.
            if (meta.instances.length === 2) {
                this.multipleInstanceMetas.push(meta);
                this.hasMultiples = true;
            }
        }
    }


});