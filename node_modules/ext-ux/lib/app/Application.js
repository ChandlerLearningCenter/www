/*global */

Ext.define('Ext.ux.app.Application', {

    constructor: function (config) {

        // grab the config
        this.config = config || {};

        // create the bus
        this.bus = {
            application: this,
            manager: {},
            controller: {}
        };

        // cheat and add this application to a global object
        Ext.app = this;

        // create the managers
        this.createManagers();

        if (this.callParent) {
            return this.callParent(config);
        } else {
            return this;
        }
    },

    initialize: function (o) {
        var me = this;
        if (this.initialized || this.initializing) {
            return;
        }
        this.initializing = true;
        o = o || {};
        // initialize the managers
        function initFailure(msg){
            me.initializing = false;
            me.initialized = false;
            me.handleFailure(o, 'Error initializing application: ' + msg);
        }
        function doInit(){
            me.initializeManagers({
                success: function () {

                    me.initializing = false;
                    me.initialized = true;

                    if (me.onInitialize) {
                        me.onInitialize(o);
                    } else {
                        me.handleSuccess(o);
                    }
          
                },
                failure: initFailure
            });
        }

        if(this.onBeforeInitialize){
            this.onBeforeInitialize({
                success: doInit,
                failure: initFailure
            });
        }else{
            doInit();
        }   
    },

    createManagers: function () {
        // this will instantiate the managers and attach them to the bus in both a lookup and a list for convenience
        var obj = this.manager,
            key, item, 
            config = this.config || {},
            bus = this.bus,
            lookup = bus.manager,
            list = [],
            getConfig;
        if (obj) {
            getConfig = function(key){
                var conf = {};
                Ext.apply(conf, config);
                if(config[key]){
                    Ext.apply(conf, config[key]); 
                }
                return conf;
            };
            for (key in obj) {
                if (obj.hasOwnProperty(key)) {
                    item = obj[key];
                    if (item) {
                        if (Ext.isString(item)) {
                            item = Ext.create(item, {
                                name: key,
                                bus: bus,
                                managerConfig: getConfig(key)
                            });
                        }
                        list.push(item);
                        lookup[key] = item;
                    }
                }
            }
        }
        bus.managerList = list;
    },

    initializeManagers: function (o) {
        var me = this;
        // function for handling one manager 
        // loop thru the managers and call initialize if available
        // remember, these are asynchronous functions
        this.every({
            params: {
                fn: function (o) {
                    var manager = o.params.item;
                    if (manager && manager.initialize) {   
                        manager.initialize({
                            success: function(){
                                if(manager.onInitialize){
                                    //console.log('manager onInitialize');
                                    manager.onInitialize(o);
                                }else{
                                    me.handleSuccess(o);
                                }
                            },
                            failure: o.failure,
                            scope: o.scope
                        });
                    } else {
                        me.handleSuccess(o);
                    }
                },
                items: this.bus.managerList
            },
            success: o.success,
            failure: o.failure,
            scope: o.scope
        });
    },

    health: function (o) {
        var me = this,
            health = {
                isHealthy: true,
                status: '',
                managers: []
            };
        // loop thru managers and get their health     
        this.every({
            params: {
                fn: function (o) {
                    var manager = o.params.item;
                    if (manager && manager.health) {
                        manager.health.call(manager, {
                            success: function (managerHealth) {
                                if (managerHealth) {
                                    health.managers.push(managerHealth);
                                    if (managerHealth.isHealthy === false) {
                                        health.isHealthy = false;
                                        health.status += managerHealth.status + '\n';
                                    }
                                }
                                me.handleSuccess(o);
                            },
                            failure: o.failure,
                            scope: o.scope
                        });
                    } else {
                        me.handleSuccess(o);
                    }
                },
                items: this.bus.managerList
            },
            success: function () {
                me.handleSuccess(o, health);
            },
            failure: o.failure,
            scope: o.scope
        });
    },

    getManager: function (name) {
        return this.bus && this.bus.manager ? this.bus.manager[name] : null;
    }
    
});